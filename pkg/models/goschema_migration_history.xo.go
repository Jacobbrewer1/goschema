// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jacobbrewer1/goschema/usql"
	"github.com/jacobbrewer1/patcher"
	"github.com/jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

const (
	// GoschemaMigrationHistoryTableName is the name of the table for the GoschemaMigrationHistory model.
	GoschemaMigrationHistoryTableName = "goschema_migration_history"
)

// GoschemaMigrationHistory represents a row from 'goschema_migration_history'.
type GoschemaMigrationHistory struct {
	Id        int       `db:"id,pk,autoinc"`
	Version   string    `db:"version"`
	Action    usql.Enum `db:"action"`
	CreatedAt time.Time `db:"created_at"`
}

// Insert inserts the GoschemaMigrationHistory to the database.
func (m *GoschemaMigrationHistory) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_" + GoschemaMigrationHistoryTableName))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO goschema_migration_history (" +
		"`version`, `action`, `created_at`" +
		") VALUES (" +
		"?, ?, ?" +
		")"

	DBLog(sqlstr, m.Version, m.Action, m.CreatedAt)
	res, err := db.Exec(sqlstr, m.Version, m.Action, m.CreatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

func InsertManyGoschemaMigrationHistorys(db DB, ms ...*GoschemaMigrationHistory) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_" + GoschemaMigrationHistoryTableName))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, any(*m))
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable(GoschemaMigrationHistoryTableName)).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	res, err := db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	for i, m := range ms {
		m.Id = int(id + int64(i))
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *GoschemaMigrationHistory) IsPrimaryKeySet() bool {
	return IsKeySet(m.Id)
}

// Update updates the GoschemaMigrationHistory in the database.
func (m *GoschemaMigrationHistory) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_" + GoschemaMigrationHistoryTableName))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE goschema_migration_history " +
		"SET `version` = ?, `action` = ?, `created_at` = ? " +
		"WHERE `id` = ?"

	DBLog(sqlstr, m.Version, m.Action, m.CreatedAt, m.Id)
	res, err := db.Exec(sqlstr, m.Version, m.Action, m.CreatedAt, m.Id)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

func (m *GoschemaMigrationHistory) Patch(db DB, newT *GoschemaMigrationHistory) error {
	if newT == nil {
		return errors.New("new goschema_migration_history is nil")
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("patch_" + GoschemaMigrationHistoryTableName))
	defer t.ObserveDuration()

	res, err := patcher.NewDiffSQLPatch(m, newT, patcher.WithTable(GoschemaMigrationHistoryTableName))
	if err != nil {
		return fmt.Errorf("new diff sql patch: %w", err)
	}

	sqlstr, args, err := res.GenerateSQL()
	if err != nil {
		switch {
		case errors.Is(err, patcher.ErrNoChanges):
			return nil
		default:
			return fmt.Errorf("failed to create patch: %w", err)
		}
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return fmt.Errorf("failed to execute patch: %w", err)
	}

	return nil
}

// InsertWithUpdate inserts the GoschemaMigrationHistory to the database, and tries to update
// on unique constraint violations.
func (m *GoschemaMigrationHistory) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_" + GoschemaMigrationHistoryTableName))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO goschema_migration_history (" +
		"`version`, `action`, `created_at`" +
		") VALUES (" +
		"?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`version` = VALUES(`version`), `action` = VALUES(`action`), `created_at` = VALUES(`created_at`)"

	DBLog(sqlstr, m.Version, m.Action, m.CreatedAt)
	res, err := db.Exec(sqlstr, m.Version, m.Action, m.CreatedAt)
	if err != nil {
		return err
	}

	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	m.Id = int(id)
	return nil
}

// Save saves the GoschemaMigrationHistory to the database.
func (m *GoschemaMigrationHistory) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the GoschemaMigrationHistory to the database, but tries to update
// on unique constraint violations.
func (m *GoschemaMigrationHistory) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the GoschemaMigrationHistory from the database.
func (m *GoschemaMigrationHistory) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_" + GoschemaMigrationHistoryTableName))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM goschema_migration_history WHERE `id` = ?"

	DBLog(sqlstr, m.Id)
	_, err := db.Exec(sqlstr, m.Id)

	return err
}

// GoschemaMigrationHistoryById retrieves a row from 'goschema_migration_history' as a GoschemaMigrationHistory.
//
// Generated from primary key.
func GoschemaMigrationHistoryById(db DB, id int) (*GoschemaMigrationHistory, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("get_" + GoschemaMigrationHistoryTableName + "_by_id"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `id`, `version`, `action`, `created_at` " +
		"FROM goschema_migration_history " +
		"WHERE `id` = ?"

	DBLog(sqlstr, id)
	var m GoschemaMigrationHistory
	if err := db.Get(&m, sqlstr, id); err != nil {
		return nil, err
	}

	return &m, nil
}

// Valid values for the 'Action' enum column
var (
	GoschemaMigrationHistoryActionMigratingUp    = usql.NewEnum("migrating_up")
	GoschemaMigrationHistoryActionMigratingDown  = usql.NewEnum("migrating_down")
	GoschemaMigrationHistoryActionMigratedUp     = usql.NewEnum("migrated_up")
	GoschemaMigrationHistoryActionMigratedDown   = usql.NewEnum("migrated_down")
	GoschemaMigrationHistoryActionMigrationError = usql.NewEnum("migration_error")
)
