// Package models contains the database interaction model code
//
// GENERATED BY GOSCHEMA. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jacobbrewer1/patcher"
	"github.com/jacobbrewer1/patcher/inserter"
	"github.com/prometheus/client_golang/prometheus"
)

const (
	// GoschemaMigrationVersionTableName is the name of the table for the GoschemaMigrationVersion model.
	GoschemaMigrationVersionTableName = "goschema_migration_version"
)

// GoschemaMigrationVersion represents a row from 'goschema_migration_version'.
type GoschemaMigrationVersion struct {
	Version   string    `db:"version,pk"`
	IsCurrent int       `db:"is_current"`
	CreatedAt time.Time `db:"created_at"`
}

// Insert inserts the GoschemaMigrationVersion to the database.
func (m *GoschemaMigrationVersion) Insert(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_" + GoschemaMigrationVersionTableName))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO goschema_migration_version (" +
		"`version`, `is_current`, `created_at`" +
		") VALUES (" +
		"?, ?, ?" +
		")"

	DBLog(sqlstr, m.Version, m.IsCurrent, m.CreatedAt)
	_, err := db.Exec(sqlstr, m.Version, m.IsCurrent, m.CreatedAt)
	return err
}

func InsertManyGoschemaMigrationVersions(db DB, ms ...*GoschemaMigrationVersion) error {
	if len(ms) == 0 {
		return nil
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_many_" + GoschemaMigrationVersionTableName))
	defer t.ObserveDuration()

	vals := make([]any, 0, len(ms))
	for _, m := range ms {
		// Dereference the pointer to get the struct value.
		vals = append(vals, any(*m))
	}

	sqlstr, args, err := inserter.NewBatch(vals, inserter.WithTable(GoschemaMigrationVersionTableName)).GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to create batch insert: %w", err)
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return err
	}

	return nil
}

// IsPrimaryKeySet returns true if all primary key fields are set to none zero values
func (m *GoschemaMigrationVersion) IsPrimaryKeySet() bool {
	return IsKeySet(m.Version)
}

// Update updates the GoschemaMigrationVersion in the database.
func (m *GoschemaMigrationVersion) Update(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("update_" + GoschemaMigrationVersionTableName))
	defer t.ObserveDuration()

	const sqlstr = "UPDATE goschema_migration_version " +
		"SET `is_current` = ?, `created_at` = ? " +
		"WHERE `version` = ?"

	DBLog(sqlstr, m.IsCurrent, m.CreatedAt, m.Version)
	res, err := db.Exec(sqlstr, m.IsCurrent, m.CreatedAt, m.Version)
	if err != nil {
		return err
	}

	// Requires clientFoundRows=true
	if i, err := res.RowsAffected(); err != nil {
		return err
	} else if i <= 0 {
		return ErrNoAffectedRows
	}

	return nil
}

// InsertWithUpdate inserts the GoschemaMigrationVersion to the database, and tries to update
// on unique constraint violations.
func (m *GoschemaMigrationVersion) InsertWithUpdate(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("insert_update_" + GoschemaMigrationVersionTableName))
	defer t.ObserveDuration()

	const sqlstr = "INSERT INTO goschema_migration_version (" +
		"`version`, `is_current`, `created_at`" +
		") VALUES (" +
		"?, ?, ?" +
		") ON DUPLICATE KEY UPDATE " +
		"`is_current` = VALUES(`is_current`), `created_at` = VALUES(`created_at`)"

	DBLog(sqlstr, m.Version, m.IsCurrent, m.CreatedAt)
	_, err := db.Exec(sqlstr, m.Version, m.IsCurrent, m.CreatedAt)
	return err
}

// Save saves the GoschemaMigrationVersion to the database.
func (m *GoschemaMigrationVersion) Save(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.Insert(db)
}

// SaveOrUpdate saves the GoschemaMigrationVersion to the database, but tries to update
// on unique constraint violations.
func (m *GoschemaMigrationVersion) SaveOrUpdate(db DB) error {
	if m.IsPrimaryKeySet() {
		return m.Update(db)
	}
	return m.InsertWithUpdate(db)
}

// Delete deletes the GoschemaMigrationVersion from the database.
func (m *GoschemaMigrationVersion) Delete(db DB) error {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("delete_" + GoschemaMigrationVersionTableName))
	defer t.ObserveDuration()

	const sqlstr = "DELETE FROM goschema_migration_version WHERE `version` = ?"

	DBLog(sqlstr, m.Version)
	_, err := db.Exec(sqlstr, m.Version)

	return err
}

// GoschemaMigrationVersionByVersion retrieves a row from 'goschema_migration_version' as a GoschemaMigrationVersion.
//
// Generated from primary key.
func GoschemaMigrationVersionByVersion(db DB, version string) (*GoschemaMigrationVersion, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("get_" + GoschemaMigrationVersionTableName + "_by_version"))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `version`, `is_current`, `created_at` " +
		"FROM goschema_migration_version " +
		"WHERE `version` = ?"

	DBLog(sqlstr, version)
	var m GoschemaMigrationVersion
	if err := db.Get(&m, sqlstr, version); err != nil {
		return nil, err
	}

	return &m, nil
}

type goschemaMigrationVersionPKWherer struct {
	ids []interface{}
}

func (m goschemaMigrationVersionPKWherer) Where() (string, []interface{}) {
	return "`version` = ?", m.ids
}

// Patch updates the GoschemaMigrationVersion in the database.
//
// Generated from primary key.
func (m *GoschemaMigrationVersion) Patch(db DB, newT *GoschemaMigrationVersion) error {
	if newT == nil {
		return errors.New("new primary is nil")
	}

	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("patch_" + GoschemaMigrationVersionTableName))
	defer t.ObserveDuration()

	res, err := patcher.NewDiffSQLPatch(
		m,
		newT,
		patcher.WithTable(GoschemaMigrationVersionTableName),
		patcher.WithWhere(&goschemaMigrationVersionPKWherer{
			ids: []interface{}{m.Version},
		}),
	)
	if err != nil {
		switch {
		case errors.Is(err, patcher.ErrNoChanges):
			return nil
		default:
			return fmt.Errorf("new diff sql patch: %w", err)
		}
	}

	sqlstr, args, err := res.GenerateSQL()
	if err != nil {
		return fmt.Errorf("failed to generate patch: %w", err)
	}

	DBLog(sqlstr, args...)
	_, err = db.Exec(sqlstr, args...)
	if err != nil {
		return fmt.Errorf("failed to execute patch: %w", err)
	}

	return nil
}

// GetAllGoschemaMigrationVersion retrieves all rows from 'goschema_migration_version' as a slice of GoschemaMigrationVersion.
//
// Generated from table 'goschema_migration_version'.
func GetAllGoschemaMigrationVersion(db DB) ([]*GoschemaMigrationVersion, error) {
	t := prometheus.NewTimer(DatabaseLatency.WithLabelValues("get_all_" + GoschemaMigrationVersionTableName))
	defer t.ObserveDuration()

	const sqlstr = "SELECT `version`, `is_current`, `created_at` " +
		"FROM goschema_migration_version"

	DBLog(sqlstr)
	m := make([]*GoschemaMigrationVersion, 0)
	if err := db.Select(&m, sqlstr); err != nil {
		return nil, fmt.Errorf("failed to get all GoschemaMigrationVersion: %w", err)
	}

	return m, nil
}
